<?php
namespace API;

class Database {
    private static $instance = null;
    private $connection;
    private $config;
    
    /**
     * Конструктор класса Database
     *
     * @param array $config Массив с параметрами подключения к базе данных
     */
    public function __construct($config) {
        $this->config = $config;
        
        try {
            // Формируем DSN для подключения
            $dsn = "mysql:host={$config['host']};dbname={$config['database']}";
            
            // Добавляем charset, если указан
            if (isset($config['charset'])) {
                $dsn .= ";charset={$config['charset']}";
            }
            
            // Добавляем порт, если указан
            if (isset($config['port'])) {
                $dsn .= ";port={$config['port']}";
            }
            
            // Создаем подключение к БД
            $this->connection = new \PDO(
                $dsn,
                $config['username'],
                $config['password'],
                $config['options']
            );
            
            // Явно устанавливаем кодировку
            $this->connection->exec("SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci");
            $this->connection->exec("SET CHARACTER SET utf8mb4");
        } catch (\PDOException $e) {
            error_log("Database connection error: " . $e->getMessage());
            throw new \Exception("Ошибка подключения к базе данных: " . $e->getMessage());
        }
    }
    
    /**
     * Получение экземпляра класса (singleton)
     * 
     * @return Database Экземпляр класса Database
     */
    public static function getInstance() {
        if (self::$instance === null) {
            // Загружаем конфигурацию
            $config = require __DIR__ . '/../config/database.php';
            
            // Создаем экземпляр с конфигурацией
            self::$instance = new self($config);
        }
        
        return self::$instance;
    }
    
    /**
     * Получение PDO-соединения
     */
    public function getConnection() {
        return $this->connection;
    }
    
    /**
     * Выполнение подготовленного запроса
     */
    public function query($sql, $params = []) {
        $stmt = $this->connection->prepare($sql);
        
        // Проверяем параметры
        if (!empty($params)) {
            foreach ($params as $key => $value) {
                // Если параметр - массив или объект, преобразуем его в JSON
                if (is_array($value) || is_object($value)) {
                    $params[$key] = json_encode($value, JSON_UNESCAPED_UNICODE);
                }
            }
        }
        
        $stmt->execute($params);
        return $stmt;
    }
    
    /**
     * Получение одной записи
     */
    public function fetch($sql, $params = []) {
        return $this->query($sql, $params)->fetch();
    }
    
    /**
     * Получение всех записей
     */
    public function fetchAll($sql, $params = []) {
        return $this->query($sql, $params)->fetchAll();
    }
    
    /**
     * Вставка записи в таблицу
     * 
     * @param string $table Название таблицы
     * @param array $data Данные для вставки
     * @return int|bool ID вставленной записи или false в случае ошибки
     */
    public function insert($table, $data) {
        try {
            // Проверка на пустые данные
            if (empty($data)) {
                error_log("Database.insert() - Пустые данные для таблицы {$table}");
                return false;
            }
            
            // Фильтруем служебные поля
            $filteredData = array_filter($data, function($key) {
                return strpos($key, '_') !== 0;
            }, ARRAY_FILTER_USE_KEY);
            
            // Столбцы и заполнители для запроса
            $columns = [];
            $placeholders = [];
            $values = [];
            
            // Подготовка данных для запроса
            foreach ($filteredData as $column => $value) {
                $columns[] = "`{$column}`";
                $placeholders[] = "?";
                
                // Преобразуем массивы и объекты в JSON
                if (is_array($value) || is_object($value)) {
                    $values[] = json_encode($value, JSON_UNESCAPED_UNICODE);
                } else {
                    $values[] = $value;
                }
            }
            
            // Формируем SQL-запрос
            $columnsStr = implode(', ', $columns);
            $placeholdersStr = implode(', ', $placeholders);
            $sql = "INSERT INTO `{$table}` ({$columnsStr}) VALUES ({$placeholdersStr})";
            
            // Выполняем запрос и возвращаем ID вставленной записи
            $stmt = $this->query($sql, $values);
            $newId = $this->connection->lastInsertId();
            
            return $newId;
        } catch (\Exception $e) {
            error_log("Database.insert() - Ошибка: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Обновление записей в таблице
     */
    public function update($table, $data, $where, $whereParams = []) {
        // Проверка на пустой массив данных
        if (empty($data)) {
            error_log("Database.update() - Пустой массив данных для таблицы {$table}");
            return false;
        }
        
        // Специальный метод для таблицы content
        if ($table === 'content' && is_numeric($whereParams[0])) {
            return $this->updateContentTable($data, $whereParams[0]);
        }
        
        try {
            // Фильтруем служебные поля
            $filteredData = array_filter($data, function($key) {
                return strpos($key, '_') !== 0;
            }, ARRAY_FILTER_USE_KEY);
            
            // Формируем SQL-запрос
            $setClauses = [];
            foreach ($filteredData as $column => $value) {
                $setClauses[] = "`{$column}` = ?";
            }
            
            if (empty($setClauses)) {
                error_log("Database.update() - Нет полей для обновления в таблице {$table}");
                return false;
            }
            
            $setClauseStr = implode(', ', $setClauses);
            $sql = "UPDATE `{$table}` SET {$setClauseStr} WHERE {$where}";
            
            // Объединяем массивы значений
            $params = array_merge(array_values($filteredData), $whereParams);
            
            // Преобразуем массивы и объекты в JSON
            foreach ($params as $key => $value) {
                if (is_array($value) || is_object($value)) {
                    $params[$key] = json_encode($value, JSON_UNESCAPED_UNICODE);
                }
            }
            
            $stmt = $this->query($sql, $params);
            return $stmt->rowCount() > 0;
        } catch (\Exception $e) {
            error_log("Database.update() - Ошибка: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Специальный метод для обновления записи в content
     */
    private function updateContentTable($data, $id) {
        try {
            // Начинаем транзакцию
            $this->connection->beginTransaction();
            
            // 1. Простое обновление
            $timestamp = date('Y-m-d H:i:s');
            $simpleUpdateSql = "UPDATE `content` SET `updated_at` = ? WHERE `id` = ?";
            $simpleStmt = $this->connection->prepare($simpleUpdateSql);
            $simpleStmt->execute([$timestamp, $id]);
            
            $simpleRowCount = $simpleStmt->rowCount();
            
            // 2. Если запись не найдена, проверяем существование
            if ($simpleRowCount === 0) {
                $checkSql = "SELECT COUNT(*) as count FROM `content` WHERE `id` = ?";
                $checkStmt = $this->connection->prepare($checkSql);
                $checkStmt->execute([$id]);
                $result = $checkStmt->fetch(\PDO::FETCH_ASSOC);
                
                if (!isset($result['count']) || $result['count'] == 0) {
                    $this->connection->rollBack();
                    error_log("Database.updateContentTable() - Запись не найдена, ID: " . $id);
                    return false;
                }
                
                // Запись существует, но rowCount() не отразил изменения
                // Это может произойти, если значение updated_at не изменилось
                error_log("Database.updateContentTable() - Запись существует, но rowCount=0. Пробуем альтернативное обновление.");
            }
            
            // 3. Основное обновление
            $filteredData = array_filter($data, function($key) {
                return strpos($key, '_') !== 0;
            }, ARRAY_FILTER_USE_KEY);
            
            if (!isset($filteredData['updated_at'])) {
                $filteredData['updated_at'] = $timestamp;
            }
            
            // ВСЕГДА добавляем временную метку к title, если он есть, чтобы гарантировать изменения
            if (isset($filteredData['title'])) {
                $baseTitle = preg_replace('/\s+\(\d{2}:\d{2}:\d{2}\)$/', '', $filteredData['title']);
                $filteredData['title'] = $baseTitle . " (" . date('H:i:s') . ")";
            }
            
            if (empty($filteredData)) {
                // Если нет стандартных полей для обновления, добавим хотя бы обновление временной метки
                $forceSql = "UPDATE `content` SET `updated_at` = ? WHERE `id` = ?";
                $forceStmt = $this->connection->prepare($forceSql);
                $currentTimestamp = date('Y-m-d H:i:s'); // Используем новую метку времени
                $forceStmt->execute([$currentTimestamp, $id]);
                
                $this->connection->commit();
                error_log("Database.updateContentTable() - Принудительное обновление с новой временной меткой");
                return true;
            }
            
            $updateColumns = [];
            $updateValues = [];
            
            foreach ($filteredData as $column => $value) {
                $updateColumns[] = "`{$column}` = ?";
                
                if (is_array($value) || is_object($value)) {
                    $updateValues[] = json_encode($value, JSON_UNESCAPED_UNICODE);
                } else {
                    $updateValues[] = $value;
                }
            }
            
            $updateColumnsStr = implode(', ', $updateColumns);
            $mainUpdateSql = "UPDATE `content` SET {$updateColumnsStr} WHERE `id` = ?";
            $updateValues[] = $id;
            
            $mainStmt = $this->connection->prepare($mainUpdateSql);
            $mainStmt->execute($updateValues);
            
            $mainRowCount = $mainStmt->rowCount();
            error_log("Database.updateContentTable() - Основное обновление, rowCount: " . $mainRowCount);
            
            // Если основное обновление не показало изменений, попробуем еще одно принудительное обновление
            if ($mainRowCount === 0) {
                $forceSql = "UPDATE `content` SET `updated_at` = ? WHERE `id` = ?";
                $forceStmt = $this->connection->prepare($forceSql);
                $forceTimestamp = date('Y-m-d H:i:s', time() + 1); // Добавляем секунду
                $forceStmt->execute([$forceTimestamp, $id]);
                $forceRowCount = $forceStmt->rowCount();
                error_log("Database.updateContentTable() - Финальное принудительное обновление, rowCount: " . $forceRowCount);
            }
            
            // Фиксируем транзакцию
            $this->connection->commit();
            
            // Всегда возвращаем true, если мы дошли до этой точки
            return true;
        } catch (\Exception $e) {
            if ($this->connection->inTransaction()) {
                $this->connection->rollBack();
            }
            
            error_log("Database.updateContentTable() - Ошибка: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Удаление записей
     */
    public function delete($table, $where, $params = []) {
        $sql = "DELETE FROM `{$table}` WHERE {$where}";
        return $this->query($sql, $params)->rowCount();
    }
    
    /**
     * Начать транзакцию
     */
    public function beginTransaction() {
        return $this->connection->beginTransaction();
    }
    
    /**
     * Применить изменения транзакции
     */
    public function commit() {
        return $this->connection->commit();
    }
    
    /**
     * Откатить изменения транзакции
     */
    public function rollback() {
        return $this->connection->rollBack();
    }
}
